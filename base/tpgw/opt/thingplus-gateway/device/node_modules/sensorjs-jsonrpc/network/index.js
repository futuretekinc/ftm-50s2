'use strict';

var util = require('util'),
Network = require('../index').Network,
Device = require('../index').Device,
_ = require('lodash'),
rpcHelper = require('../rpcHelper'),
logger = Network.getLogger(),
getMac =  require('getmac').getMac,
SensorLib = require('sensorjs').sensor,
gatewayId;

getMac(function (err, addr) {
  gatewayId = addr.toString().replace(/[:-]/g, '').toLowerCase();
});

function Jsonrpc(options) {
  Network.call(this, 'jsonrpc', options);
  this.devices = [];
}

util.inherits(Jsonrpc, Network);

Jsonrpc.prototype.getDevice = function (addr, options, cb) {
  if (typeof options === 'function') {
    cb = options;
  }

  return cb && cb(null, _.find(this.devices, {address: addr}));
};

function findModel(type) {
  var model;
  var jsonrpcSensorDriver = SensorLib.getSensorDriver('jsonrpcSensor'),
  jsonrpcActuatorDriver = SensorLib.getSensorDriver('jsonrpcActuator');
  if (jsonrpcSensorDriver && jsonrpcSensorDriver.properties) {
    _.each(jsonrpcSensorDriver.properties.dataTypes, function(v, k) {
      if (_.contains(v, type)) {
        model = k;
        return false;
      }
    });
  }
  if (!model && jsonrpcActuatorDriver && jsonrpcActuatorDriver.properties) {
    _.each(jsonrpcActuatorDriver.properties.dataTypes, function(v, k) {
      if (_.contains(v, type)) {
        model = k;
        return false;
      }
    });
  }
  return model;
}

Jsonrpc.prototype.discover = function (driverOrModel, cb) {
  var self = this;

  if (!_.isEmpty(self.devices)) { //already got
    if (cb) {
      return cb(null, self.devices);
    } else {
      _.each(self.devices, function (device) {
        self.emit('discovered', device);
      });
      self.emit('done');
      return;
    }
  }

  rpcHelper.call('discover', function (err, resultArr) {
    // id template: {deviceAddress}-{type}-{sequence#}, add gatewayId prefix
    // address -> deviceAddress
    // type : convert it to model
    if (err || !resultArr) {
      logger.error('jsonrpc network: discover err', err, resultArr);
      if (cb) {
        return cb(new Error('not found'));
      } else {
        self.emit('done');
        return;
      }
    }
    if (!resultArr && !_.isArray(resultArr)) {
      resultArr = [resultArr];
    }
    self.devices = [];
    _.each(resultArr, function (result) {
      //append gatewayId to complete sensor id
      _.each(result.sensors, function(sensor) {
        sensor.id = sensor.id && [gatewayId, sensor.id].join('-'); 
        if (!sensor.model && sensor.type) {
          sensor.model = findModel(sensor.type);
        }
        if (!sensor.model) {
          logger.error('sensor model not found, type=%s', sensor.type);
        }
        if (sensor.notification) {//enable log, either 1 or true
          if (!sensor.options) { sensor.options = {};}
          sensor.options.notification= true;
        }
        if (sensor.name) {
          if (!sensor.options) { sensor.options = {};}
          sensor.options.name= sensor.name;
        }
      });
      var device = new Device(self, result.address || result.deviceAddress, result.sensors);
      //logger.info('jsonrpc discover device', device);
      self.devices.push(device);
    });
    if (cb) {
      return cb(null, self.devices);
    } else {
      _.each(self.devices, function (device) {
        self.emit('discovered', device);
      });
      self.emit('done');
      return;
    }
  });
};

module.exports = new Jsonrpc();
