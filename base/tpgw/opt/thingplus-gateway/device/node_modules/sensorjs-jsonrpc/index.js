'use strict';
var logger = require('log4js').getLogger('Sensor');

var ACTUATOR_DRIVER_NAME = 'jsonrpcActuator', 
  ACTUATOR_DRIVER_MODELS = ['jsonrpcDo', 'jsonrpcTempCtrl', 'jsonrpcServomotor'],
  SENSOR_DRIVER_NAME = 'jsonrpcSensor',
  SENSOR_DRIVER_MODELS = [
    'jsonrpcTemp', 'jsonrpcHumi', 'jsonrpcLight', 'jsonrpcNoise', 'jsonrpcDi',
    'jsonrpcMotion', 'jsonrpcCo2', 'jsonrpcCo', 'jsonrpcVoc', 'jsonrpcPower',
    'jsonrpcDust', 'jsonrpcCount', 'jsonrpcCountEvent', 'jsonrpcVoltage',
    'jsonrpcWeight', 'jsonrpcColor', 'jsonrpcVibration', 'jsonrpcSpeed',
    'jsonrpcAccelerometer', 'jsonrpcString',
    'jsonrpcPressure' 
  ],
  NETWORK_DRIVER_NAME = 'jsonrpc';
function initNetworks() {
  var net, rtn;

  try {
    net = require('./network/index.js');
  } catch (e) {
    logger.error('init networks error', e);
  }
  rtn = {};
  rtn[NETWORK_DRIVER_NAME] = net;

  return rtn;
}

function initDrivers() {
  var rtn = {}, actuatorDriver, sensorDriver;

  if (SENSOR_DRIVER_NAME) {
    try {
      sensorDriver = require('./driver/' + SENSOR_DRIVER_NAME);
    } catch(e) {
      logger.error('[%s] init drivers error', SENSOR_DRIVER_NAME, e);
    }
    rtn[SENSOR_DRIVER_NAME] = sensorDriver;
  }
  if (ACTUATOR_DRIVER_NAME) {
    try {
      actuatorDriver = require('./driver/' + ACTUATOR_DRIVER_NAME);
    } catch(e) {
      logger.error('[%s] init drivers error', ACTUATOR_DRIVER_NAME, e);
    }
    rtn[ACTUATOR_DRIVER_NAME] = actuatorDriver;
  }
  return rtn;
}

//driver to model mapping
var drivers = {};
if (SENSOR_DRIVER_NAME) {
  drivers[SENSOR_DRIVER_NAME] = SENSOR_DRIVER_MODELS;
}
if (ACTUATOR_DRIVER_NAME) {
  drivers[ACTUATOR_DRIVER_NAME] = ACTUATOR_DRIVER_MODELS;
}

module.exports = {
  networks: NETWORK_DRIVER_NAME ? [NETWORK_DRIVER_NAME] : [],
  drivers: drivers,
  initNetworks: initNetworks,
  initDrivers: initDrivers
};
