{
  "name": "sensorjs-jsonrpc",
  "description": "jsonrpc based sensor networks and drivers for sensorjs",
  "version": "0.0.1-1",
  "author": {
    "name": "daliworks",
    "email": "dev@daliworks.net"
  },
  "dependencies": {
    "getmac": "1.0.4",
    "jsonrpc-tcp": "git+https://github.com/daliworks/node-jsonrpc-tcp.git",
    "limiter": "^1.0.5",
    "lodash": "2.4.1",
    "log4js": "0.6"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "grunt-simple-mocha": "0.4.x",
    "grunt": "~0.4.1",
    "sensorjs": "git+https://github.com/daliworks/sensorjs.git",
    "rewire": "^2.3.0"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:daliworks/sensorjs-jsonrpc"
  },
  "bugs": {
    "url": "https://github.com/daliworks/sensorjs-jsonrpc/issues"
  },
  "main": "index",
  "keywords": [
    "sensor",
    "sensor.js",
    "jsonrpc",
    "driver"
  ],
  "engines": {
    "node": ">=0.8.x"
  },
  "licenses": [
    {
      "type": "Copyright (c) 2015, Daliworks. All rights reserved."
    }
  ],
  "readme": "Sensorjs-jsonrpc\n================\n\nThis is Sensorjs driver communicating with your device over TCP in JSON-RPC format.\n[https://github.com/daliworks/sensorjs](https://github.com/daliworks/sensorjs)\n\n\n![Device server and Thing+](/docs/arch.png)\n\nYou need to implement the Device Server to connect your devices and sensors. It works as JSON-RPC Server. Thing+ Gateway and Device Server are separate processes. They are communicating over TCP in JSON-RPC format.\n\n\n## Implementation guide\nYou can refer to sample JSON-RPC servers below `example/`. There are several examples written in C and javascript.  Let's look at an example written for Arduno board. \n\n\nThis example uses [Johny fiv](https://github.com/rwaldron/johnny-five) to access Arduino board and its sensors. It is written in node.js javascript.\n\n![arduino picture](/docs/arduino.jpg)\n\n * Files  \n\n```shell\nexample/arduino-nodejs/       # examples written for node.js\n     + app.js                  # JSON-RPC server implementaion\n     + arduinoSensors.js      # accessing arduino sensors using jonny-five\n```\n\n### Arduino specifis Impl: `arduino-nodejs/arduinoSensors.js `\n  \n  All Arduino specifics are in this file. You can refer [Johny fiv](https://github.com/rwaldron/johnny-five) for implementation details. \n  \n  Implementation Note: Since Motion and flame events are triggered too frequently, their events are debounced during 30secs period. For instance, the initial motion start is detected, a motion start is triggered. Another motion start is detected 5secs after that, a motion end is delivevered at 35secs since the the initial motion start.\n\nUsage example:\n    \n```js\n  arduinoSensors.on('ready', function() {\n    //get temperature\n    var temp = arduinoSensors.getData('lm35');\n    console.log('lm35', temp);\n    //set event handler for sensor data notification\n    arduinoSensors.on('event', function (name, value) {\n      console.log(name, value);\n    });\n    //do actuator command\n    arduinoSensors.doCommand('piezo', 'on');\n  });\n```  \n  \n### JSON-RPC Server Impl: `arduino-nodejs/index.js`\n  * Configuration\n  \t* JSON-RPC port and other configuraton defaults.\n  * Devices and its sensors info to be used for discovery response\n  \t* This example has only one device(one Arduino board). You can assign different address for the other board. \n\t* Sensor id can be any url unreserved characters on condition that it is uniq across your devices under the gateway.\n\t* There are two temperatures. Actually they are from one physical sensor. But, they are implemented as different way intentionlly for example purpose. To show difference between series and event type, `lm35` is polled periodically via sensor.get method and `lm35Event` is notified periodically via sensor.get method. Please note that `lm35Event` has `notification: true` since it's event.\n\t\n    * For more about all sensor and actuator lists, please see [sensorTypes](https://github.com/daliworks/thingplus-embedded/docs/gateway/sensorTypes.md). You can find more details explanations about difference between event and series sensors.\n  * JSON-RPC server setup  \n  \t* This part start serving JSON-RPC server. It exposes below funtions:\n\t  * `discover` : Devices and its sensors info covered as above.\n\t  * `get` : retrieve sensor data.\n\t  * `set` : set actuator command with options.\n\n  * Arduino board setup \n    * set listener for sensor data notification from the board\n\t* By monitoring sensors' status, send their status via notification method at status report interval(60sec).\n\t\n### Note about sensorjs-jsonrpc Impl.\n  *\tSeries data are gathered and sent them together to the server at the gateway report interval(>= 1min). \n  * Event sensor data(ex. onoff) are reported to the server immediately regardless of the gateway interval.\n  * The implementation limits 10 sensing values per minute. This means that more than 10 values are discarded. This applies to both series and event sensors.\n  * On disconnection to JSON-RPC server, retry connection interval is 30 secs.\n\n## Protocol btw Thing+Gateway <-> Device side.\n\n Note: \n  * json stream seperated with newline('\\n'); So that json message must not include newline in the middle.\n\n### discovery\n\n  * method: discover\n  * params: NONE\n  * result: array of dvice info\n    * device.sensors : array of sensor info\n      * id: sensor id, {device_id}-{uniq_id}\n      * type: sensor type\n      * notification: true if event type sensor(like onoff) or log value\n      \n--> \n```json\n{\"id\":1,\"method\":\"discover\",\"params\":[]}\n```\n\n<-- \n```json\n{\"id\":1,\"result\":[{\"deviceAddress\":\"0a0b0c0d0e00\",\"sensors\":[{\"id\":\"0a0b0c0d0e00-temperature-0\",\"type\":\"temperature\",\"name\":\"temp0\"},{\"id\":\"0a0b0c0d0e00-temperature-1\",\"type\":\"temperature\",\"name\":\"temp1\", \"notification\": true},{\"id\":\"0a0b0c0d0e00-humidity-0\",\"type\":\"humidity\",\"name\":\"humi0\"},{\"id\":\"0a0b0c0d0e00-onoff-0\",\"type\":\"onoff\",\"name\":\"di0\"},{\"id\":\"0a0b0c0d0e00-powerSwitch-0\",\"type\":\"powerSwitch\",\"name\":\"do0\"}]}],\"error\":null}\n```\n\n### get sensor value\n  * method: sensor.get\n  * params: sensorId\n\n  * result: \n    * value: sensing value\n      * ignored if status is `off` or `err`\n    * status: (on|off|err) \n      * assuming `on` if value is provided;\n    * message: optionally provided if status is `err`\n\n--> \n```json\n{\"id\":2,\"method\":\"sensor.get\",\"params\":[\"0a0b0c0d0e00-temperature-0\"]}\n```\n<-- \n```json\n{\"id\":2,\"result\":{\"value\":5.63},\"error\":null}\n```\n```json\n{\"id\":2,\"result\":{\"status\":\"off\"},\"error\":null}\n```\n```json\n{\"id\":2,\"result\":{\"status\":\"err\",\"message\":\"initializing\"},\"error\":null}\n```\n\n### set atuator value\n  * method: sensor.set\n  * params: sensorId, command, options\n  * return: result or error\n    * result: success messsage \n    * error: error message\n\n  * status notification: \n    * status: (on|off|err) \n      * assuming `on` if there is no status notification after connected.\n    * message: optionally provided if status is `err`\n\n--> \n```json\n{\"id\":3,\"method\":\"sensor.set\",\"params\":[\"0a0b0c0d0e00-powerSwitch-0\",\"on\",null]}\n```\n<-- \n```json\n{\"id\":3,\"result\":\"on\",\"error\":null}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-powerSwitch-0\",{\"status\": \"off\"}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-powerSwitch-0\",{\"status\": \"on\"}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-powerSwitch-0\",{\"status\": \"err\",\"message\":\"initializing\"}]}\n```\n\n### set sensor value notification \n  * method: sensor.setNotification\n  * params: sensorId\n\n  * notification: \n    * value: sensing value\n      * ignored if status is `off` or `err`\n    * status: (on|off|err) \n      * assuming `on` if value is provided;\n    * message: optionally provided if status is `err`\n\n#### event type sensor case\n--> \n```json\n{\"id\":5,\"method\":\"sensor.setNotification\",\"params\":[\"0a0b0c0d0e00-onoff-0\"]}\n```\n<-- \n```json\n{\"id\":5,\"result\":\"success\",\"error\":null}\n```\n<-- \n```json\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{\"value\": 1}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{\"value\": 1}]}\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{\"status\": \"off\"}]}\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-onoff-0\",{\"status\": \"err\",\"message\":\"initializing\"}]}\n```\n\n#### log value case(```notification: true``` at the discovered sensor info)\n  * Note: if notification interval is larger than gateway interval, status 'on' notification should be sent in between gateway interval.  \n--> \n```json\n{\"id\":5,\"method\":\"sensor.setNotification\",\"params\":[\"0a0b0c0d0e00-temperature-1\"]}\n```\n<-- \n```json\n{\"id\":5,\"result\":\"success\",\"error\":null}\n```\n<-- \n```json\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{\"time\": 1426582038144, \"value\": 24.0}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{\"status\": \"on\"}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{\"status\": \"off\"}]}\n...\n{\"method\":\"sensor.notification\",\"params\":[\"0a0b0c0d0e00-temperature-1\",{\"status\": \"err\", \"message\": \"initializing\"}]}\n```\n\n## Device side code example\n\n  * Nodejs version ```example/jsonrpc-nodejs/```\n```\n$ cd example/jsonrpc-nodejs/\n$ node server.js\n```\n  * C version ```example/jsonrpc-c/```\n     * Note: only discover and sensor.get are implemented as example\n```\n$ cd example/jsonrpc-c/; make;\n$ ./example/server\n```\n\n## how to test\n\n### run your code\n```\n$ cd example/jsonrpc-nodejs; node server.js\n```\n\nNote: to trace all message transmitions: uncomment below lines at ```node_modules/jsonrpc-tcp/lib/jsonrpc-tcp/connection.js```\n\n  *  console.log('RECV: ' + data.trim());\n  *  console.log('XMIT: ' + JSON.stringify(obj));\n\n\n### run test\n```\n$ npm install --force # force options since some modules require arm-linux env.\n$ grunt # http://gruntjs.com/getting-started\n```\n\n----\n## LICENSE \n```\n/*\n * Copyright (c) 2014, Daliworks. All rights reserved.\n *\n * Reproduction and/or distribution in source and binary forms \n * without the written consent of Daliworks, Inc. is prohibited.\n *\n */\n ```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/daliworks/sensorjs-jsonrpc",
  "_id": "sensorjs-jsonrpc@0.0.1-1",
  "_shasum": "43e6fb4d4b7836c1bf7056cd64da082334cc17b0",
  "_resolved": "https://github.com/daliworks/sensorjs-jsonrpc.git#e8475644cb236eafa73aec7b83813ebbeae046a2",
  "_from": "sensorjs-jsonrpc@git+https://github.com/daliworks/sensorjs-jsonrpc.git"
}
