'use strict';
var util = require('util');

var SensorLib = require('../index'),
    Actuator = SensorLib.Actuator,
    rpcHelper = require('../rpcHelper'),
    _ = require('lodash'),
    logger = Actuator.getLogger();

function JsonrpcActuator(sensorInfo, options) {
  var self = this;
  Actuator.call(this, sensorInfo, options);

  this.shortId = this.id.substr(this.id.indexOf('-')+1);

  this.myStatus = 'off';
  rpcHelper.init();

  rpcHelper.on('connect', function () {
    self.myStatus = 'on';
  });
  rpcHelper.on('disconnect', function () {
    self.myStatus = 'off';

    var rtn = {status: 'off', id : self.id};
    rtn.message = 'disconnected';
    self.emit('data', rtn);
    logger.error('[JsonrpcSensor] no connection');
  });
  rpcHelper.on('notification', function (id, val) {
    if (self.shortId === id) {
      if (val && _.contains(['on', 'off', 'err'], val.status)) {
        self.myStatus = val.status;
      } else {
        self.myStatus = 'err';
      }
    }
  });
}

JsonrpcActuator.properties = {
  supportedNetworks: ['jsonrpc'],
  dataTypes: {
    jsonrpcDo: ['powerSwitch'], 
    jsonrpcTempCtrl: ['temperatureController'],
    jsonrpcServomotor: ['servomotor']
  },
  discoverable: true,
  addressable: false,
  maxInstances: 5,
  idTemplate: '{gatewayId}-{deviceAddress}-{type}-{sequence}',
  models: ['jsonrpcDo', 'temperatureController'],
  commands: {
    jsonrpcDo: ['on', 'off'],
    jsonrpcTempCtrl: ['get', 'set'],
    jsonrpcServomotor: ['on', 'off', 'get', 'set']
  },
  category: 'actuator'
};

util.inherits(JsonrpcActuator, Actuator);

function sendCommand(id, cmd, options, cb) {
  if (_.isFunction(options)) {
    cb = options;
    options = null;
  }
  rpcHelper.call('sensor.set', id, cmd, options, cb);
}

JsonrpcActuator.prototype._set = function(cmd, options, cb) {
  var self = this;
  sendCommand(self.shortId, cmd, options, function (err, result) {
    if(err) {
      self.myStatus = 'err';
    } else {
      self.myStatus = 'on';
    }
    return cb && cb(err, result);
  });
};
JsonrpcActuator.prototype._clear = function () {
  return;
};
JsonrpcActuator.prototype.getStatus = function () {
  return this.myStatus;
};

module.exports = JsonrpcActuator;
